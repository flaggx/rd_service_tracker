services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: rd_service_tracker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d rd_service_tracker"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data

  backend:
    build: ./backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: postgresql://app:app@db:5432/rd_service_tracker?schema=public
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Build the frontend into a shared volume
  frontend:
    build: ./frontend
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_BASE: "/api"
    command: sh -c "npm run build && tail -f /dev/null"
    volumes:
      - frontend_dist:/app/dist
    restart: unless-stopped

  # Serve the built frontend and proxy /api to backend
  nginx:
    build:
      context: ./frontend
    # If you created a dedicated Dockerfile.nginx, uncomment the next line:
    # dockerfile: Dockerfile.nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    ports:
      - "80:80"
    volumes:
      - frontend_dist:/usr/share/nginx/html:ro
    restart: unless-stopped

volumes:
  pgdata:
  frontend_dist: