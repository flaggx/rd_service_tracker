services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: rd_service_tracker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d rd_service_tracker"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data

  # ===== PROD SERVICES =====
  backend:
    profiles: ["prod"]
    build: ./backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: postgresql://app:app@db:5432/rd_service_tracker?schema=public
      UPLOAD_DIR: /app/uploads
    volumes:
      - uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 10s
      timeout: 3s
      retries: 5

  frontend-build:
    profiles: ["prod"]
    image: node:22-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_dist:/app/dist
    command: sh -lc "npm ci && npm run build"
    depends_on:
      db:
        condition: service_started

  nginx:
    profiles: ["prod"]
    build:
      context: ./frontend
      dockerfile: Dockerfile.nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend-build:
        condition: service_completed_successfully
    ports:
      - "80:80"
    volumes:
      - frontend_dist:/usr/share/nginx/html:ro
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped

  # ===== DEV SERVICES =====
  backend-dev:
    profiles: ["dev"]
    build: ./backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: postgresql://app:app@db:5432/rd_service_tracker?schema=public
      ENABLE_CORS: "false"
      FRONTEND_ORIGIN: "http://localhost:5173"
      UPLOAD_DIR: /app/uploads
    volumes:
      - ./backend:/app
      - uploads:/app/uploads
    command: sh -lc "npm install && npx prisma generate && npm run start:dev"

  frontend-dev:
    profiles: ["dev"]
    image: node:22-alpine
    working_dir: /app
    environment:
      VITE_API_BASE: "/api"
      BACKEND_URL: "http://backend-dev:3001"
    volumes:
      - ./frontend:/app
    command: sh -lc "npm install && npm run dev -- --host"
    ports:
      - "5173:5173"
    depends_on:
      backend-dev:
        condition: service_started

volumes:
  pgdata:
  frontend_dist:
  uploads: